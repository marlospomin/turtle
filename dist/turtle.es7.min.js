const images=document.querySelectorAll('.lazyload'),config={rootMargin:'50px 0px',threshold:0.01};let observer,imageCount=images.length;if(!('IntersectionObserver'in window))loadImagesImmediately(images);else{observer=new IntersectionObserver(onIntersection,config);for(let a,b=0;b<images.length;b++)(a=images[b],!a.classList.contains('lazyload--handled'))&&observer.observe(a)}function fetchImage(a){return new Promise((b,c)=>{const d=new Image;d.src=a,d.onload=b,d.onerror=c})}function preloadImage(a){const b=a.dataset.src;return b?fetchImage(b).then(()=>{applyImage(a,b)}):void 0}function loadImagesImmediately(a){for(let b,c=0;c<a.length;c++)b=a[c],preloadImage(b)}function disconnect(){observer&&observer.disconnect()}function onIntersection(a){0===imageCount&&observer.disconnect();for(let b,c=0;c<a.length;c++)b=a[c],0<b.intersectionRatio&&(imageCount--,observer.unobserve(b.target),preloadImage(b.target))}function applyImage(a,b){a.classList.add('lazyload--handled'),a.src=b,a.classList.add('fade-in')}