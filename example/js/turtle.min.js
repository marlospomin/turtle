!function(e,t){if("function"==typeof define&&define.amd)define(["module","exports"],t);else if("undefined"!=typeof exports)t(module,exports);else{var r={exports:{}};t(r,r.exports),e.turtle=r.exports}}(this,function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){function e(e){v=new IntersectionObserver(s,a),Array.from(e).forEach(function(e){e.classList.contains("turtle--handled")||v.observe(e)})}function t(e){return new Promise(function(t,r){var n=new Image;n.src=e,n.onload=t,n.onerror=r})}function o(e){var r=e.dataset.src;if(r)return t(r).then(function(){c(e,r)})}function i(){v&&v.disconnect()}function s(e){0===l&&i(),Array.from(e).forEach(function(e){e.intersectionRatio>0&&(l--,v.unobserve(e.target),o(e.target))})}function c(e,t){e.classList.add("turle--handled"),e.src=t}var u=arguments.length>0&&void 0!==arguments[0]?arguments[0]:".turtle",a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},f=r({},n,a),d=(f.rootMargin,f.treshold,document.querySelectorAll(u)),l=d.length,v=void 0;return e(d)};var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},n={rootMargin:"50px",threshold:0};if(!("IntersectionObserver"in window))throw new Error("Intersection Observer is not supported by this browser.");e.exports=t.default});