!function(e,r){if("function"==typeof define&&define.amd)define(["module","exports"],r);else if("undefined"!=typeof exports)r(module,exports);else{var t={exports:{}};r(t,t.exports),e.turtle=t.exports}}(this,function(e,r){"use strict";Object.defineProperty(r,"__esModule",{value:!0}),r.default=function(){function e(e){d=new IntersectionObserver(i,u),Array.from(e).forEach(function(e){e.classList.contains("turtle--handled")||d.observe(e)})}function r(e){return new Promise(function(r,t){var n=new Image;n.src=e,n.onload=r,n.onerror=t})}function o(e){var t=e.dataset.src;if(t)return r(t).then(function(){s(e,t)})}function i(e){Array.from(e).forEach(function(e){e.intersectionRatio>0&&(d.unobserve(e.target),o(e.target))})}function s(e,r){e.classList.add("turle--handled"),e.src=r}var a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:".turtle",u=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},c=t({},n,u),f=(c.rootMargin,document.querySelectorAll(a)),d=void 0;return e(f)};var t=Object.assign||function(e){for(var r=1;r<arguments.length;r++){var t=arguments[r];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])}return e},n={rootMargin:"50px"};if(!("IntersectionObserver"in window))throw new Error("Intersection Observer is not supported by this browser.");e.exports=r.default});